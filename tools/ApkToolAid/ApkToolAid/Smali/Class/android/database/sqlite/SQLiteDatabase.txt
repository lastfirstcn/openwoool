Exposes methods to manage a SQLite database.%Return%SQLiteDatabase has methods to create, delete, execute SQL commands, and perform other common database management tasks.%Return%See the Notepad sample application in the SDK for an example of creating and managing a database.%Return%Database names must be unique within an application, not across all applications.
class android.database.sqlite.SQLiteDatabase
.class Landroid/database/sqlite/SQLiteDatabase;

ผฬณะ
inherit android.database.sqlite.SQLiteClosable
.super Landroid/database/sqlite/SQLiteClosable;

When a constraint violation occurs,no ROLLBACK is executed so changes from prior commands within the same transaction are preserved.
public static final int CONFLICT_ABORT
sget v0, Landroid/database/sqlite/SQLiteDatabase;->CONFLICT_ABORT:I

When a constraint violation occurs, the command aborts with a return code SQLITE_CONSTRAINT.
public static final int CONFLICT_FAIL
sget v0, Landroid/database/sqlite/SQLiteDatabase;->CONFLICT_FAIL:I

When a constraint violation occurs, the one row that contains the constraint violation is not inserted or changed.
public static final int CONFLICT_IGNORE
sget v0, Landroid/database/sqlite/SQLiteDatabase;->CONFLICT_IGNORE:I

Use the following when no conflict action is specified.
public static final int CONFLICT_NONE
sget v0, Landroid/database/sqlite/SQLiteDatabase;->CONFLICT_NONE:I

When a UNIQUE constraint violation occurs, the pre-existing rows that are causing the constraint violation are removed prior to inserting or updating the current row.
public static final int CONFLICT_REPLACE
sget v0, Landroid/database/sqlite/SQLiteDatabase;->CONFLICT_REPLACE:I

When a constraint violation occurs, an immediate ROLLBACK occurs, thus ending the current transaction, and the command aborts with a return code of SQLITE_CONSTRAINT.
public static final int CONFLICT_ROLLBACK
sget v0, Landroid/database/sqlite/SQLiteDatabase;->CONFLICT_ROLLBACK:I

Open flag: Flag for openDatabase(File, SQLiteDatabase.OpenParams) to create the database file if it does not already exist.
public static final int CREATE_IF_NECESSARY
sget v0, Landroid/database/sqlite/SQLiteDatabase;->CREATE_IF_NECESSARY:I

Open flag: Flag for openDatabase(File, SQLiteDatabase.OpenParams) to open the database file with write-ahead logging enabled by default.
public static final int ENABLE_WRITE_AHEAD_LOGGING
sget v0, Landroid/database/sqlite/SQLiteDatabase;->ENABLE_WRITE_AHEAD_LOGGING:I

Absolute max value that can be set by setMaxSqlCacheSize(int).
public static final int MAX_SQL_CACHE_SIZE
sget v0, Landroid/database/sqlite/SQLiteDatabase;->MAX_SQL_CACHE_SIZE:I

Open flag: Flag for openDatabase(File, SQLiteDatabase.OpenParams) to open the database without support for localized collators.
public static final int NO_LOCALIZED_COLLATORS
sget v0, Landroid/database/sqlite/SQLiteDatabase;->NO_LOCALIZED_COLLATORS:I

Open flag: Flag for openDatabase(File, SQLiteDatabase.OpenParams) to open the database for reading only.
public static final int OPEN_READONLY
sget v0, Landroid/database/sqlite/SQLiteDatabase;->OPEN_READONLY:I

Open flag: Flag for openDatabase(File, SQLiteDatabase.OpenParams) to open the database for reading and writing. If the disk is full, this may fail even before you actually write anything.
public static final int OPEN_READWRITE
sget v0, Landroid/database/sqlite/SQLiteDatabase;->OPEN_READWRITE:I

Maximum Length Of A LIKE Or GLOB Pattern The pattern matching algorithm used in the default LIKE and GLOB implementation of SQLite can exhibit O(N^2) performance (where N is the number of characters in the pattern) for certain pathological cases.
public static final int SQLITE_MAX_LIKE_PATTERN_LENGTH
sget v0, Landroid/database/sqlite/SQLiteDatabase;->SQLITE_MAX_LIKE_PATTERN_LENGTH:I

Begins a transaction in EXCLUSIVE mode.
void beginTransaction()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->beginTransaction()V

Begins a transaction in IMMEDIATE mode.
void beginTransactionNonExclusive()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->beginTransactionNonExclusive()V

Begins a transaction in EXCLUSIVE mode.
void beginTransactionWithListener(SQLiteTransactionListener transactionListener)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->beginTransactionWithListener(Landroid/database/sqlite/SQLiteTransactionListener;)V

Begins a transaction in IMMEDIATE mode.
void beginTransactionWithListenerNonExclusive(SQLiteTransactionListener transactionListener)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->beginTransactionWithListenerNonExclusive(Landroid/database/sqlite/SQLiteTransactionListener;)V

Compiles an SQL statement into a reusable pre-compiled statement object.
SQLiteStatement compileStatement(String sql)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->compileStatement(Ljava/lang/String;)Landroid/database/sqlite/SQLiteStatement;

Create a memory backed SQLite database.
SQLiteDatabase create(SQLiteDatabase.CursorFactory factory)
invoke-static {v0}, Landroid/database/sqlite/SQLiteDatabase;->create(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;

Create a memory backed SQLite database.
SQLiteDatabase createInMemory(SQLiteDatabase.OpenParams openParams)
invoke-static {v0}, Landroid/database/sqlite/SQLiteDatabase;->createInMemory(Landroid/database/sqlite/SQLiteDatabase$OpenParams;)Landroid/database/sqlite/SQLiteDatabase;

Convenience method for deleting rows in the database.
int delete(String table, String whereClause, String[] whereArgs)
invoke-virtual {v0, v1, v2, v3}, Landroid/database/sqlite/SQLiteDatabase;->delete(Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)I

Deletes a database including its journal file and other auxiliary files that may have been created by the database engine.
boolean deleteDatabase(File file)
invoke-static {v0}, Landroid/database/sqlite/SQLiteDatabase;->deleteDatabase(Ljava/io/File;)Z

This method disables the features enabled by enableWriteAheadLogging().
void disableWriteAheadLogging()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->disableWriteAheadLogging()V

This method enables parallel execution of queries from multiple threads on the same database.
boolean enableWriteAheadLogging()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->enableWriteAheadLogging()Z

End a transaction.
void endTransaction()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->endTransaction()V

Execute a single SQL statement that is NOT a SELECT or any other SQL statement that returns data.
void execSQL(String sql)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->execSQL(Ljava/lang/String;)V

Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE.
void execSQL(String sql, Object[] bindArgs)
invoke-virtual {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->execSQL(Ljava/lang/String;[Ljava/lang/Object;)V

Finds the name of the first table, which is editable.
String findEditTable(String tables)
invoke-static {v0}, Landroid/database/sqlite/SQLiteDatabase;->findEditTable(Ljava/lang/String;)Ljava/lang/String;

Returns list of full pathnames of all attached databases including the main database by executing 'pragma database_list' on the database.
List<Pair<String, String>> getAttachedDbs()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->getAttachedDbs()Ljava/util/List;

Returns the maximum size the database may grow to.
long getMaximumSize()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->getMaximumSize()J

Returns the current database page size, in bytes.
long getPageSize()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->getPageSize()J

Gets the path to the database file.
String getPath()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->getPath()Ljava/lang/String;

This method was deprecated in API level 15. This method no longer serves any useful purpose and has been deprecated.
Map<String, String> getSyncedTables()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->getSyncedTables()Ljava/util/Map;

Gets the database version.
int getVersion()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->getVersion()I

Returns true if the current thread has a transaction pending.
boolean inTransaction()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->inTransaction()Z

Convenience method for inserting a row into the database.
long insert(String table, String nullColumnHack, ContentValues values)
invoke-virtual {v0, v1, v2, v3}, Landroid/database/sqlite/SQLiteDatabase;->insert(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J

Convenience method for inserting a row into the database.
long insertOrThrow(String table, String nullColumnHack, ContentValues values)
invoke-virtual {v0, v1, v2, v3}, Landroid/database/sqlite/SQLiteDatabase;->insertOrThrow(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J

General method for inserting a row into the database.
long insertWithOnConflict(String table, String nullColumnHack, ContentValues initialValues, int conflictAlgorithm)
invoke-virtual {v0, v1, v2, v3, v4}, Landroid/database/sqlite/SQLiteDatabase;->insertWithOnConflict(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;I)J

Runs 'pragma integrity_check' on the given database (and all the attached databases) and returns true if the given database (and all its attached databases) pass integrity_check, false otherwise.
boolean isDatabaseIntegrityOk()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->isDatabaseIntegrityOk()Z

Returns true if the current thread is holding an active connection to the database.
boolean isDbLockedByCurrentThread()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->isDbLockedByCurrentThread()Z

This method was deprecated in API level 16. Always returns false. Do not use this method.
boolean isDbLockedByOtherThreads()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->isDbLockedByOtherThreads()Z

Returns true if the database is currently open.
boolean isOpen()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->isOpen()Z

Returns true if the database is opened as read only.
boolean isReadOnly()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->isReadOnly()Z

Returns true if write-ahead logging has been enabled for this database.
boolean isWriteAheadLoggingEnabled()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->isWriteAheadLoggingEnabled()Z

This method was deprecated in API level 15. This method no longer serves any useful purpose and has been deprecated.
void markTableSyncable(String table, String deletedTable)
invoke-virtual {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->markTableSyncable(Ljava/lang/String;Ljava/lang/String;)V

This method was deprecated in API level 15. This method no longer serves any useful purpose and has been deprecated.
void markTableSyncable(String table, String foreignKey, String updateTable)
invoke-virtual {v0, v1, v2, v3}, Landroid/database/sqlite/SQLiteDatabase;->markTableSyncable(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V

Returns true if the new version code is greater than the current database version.
boolean needUpgrade(int newVersion)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->needUpgrade(I)Z

Open the database according to the flags OPEN_READWRITE OPEN_READONLY CREATE_IF_NECESSARY and/or NO_LOCALIZED_COLLATORS.
SQLiteDatabase openDatabase(String path, SQLiteDatabase.CursorFactory factory, int flags)
invoke-static {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->openDatabase(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;I)Landroid/database/sqlite/SQLiteDatabase;

Open the database according to the specified OpenParams
SQLiteDatabase openDatabase(File path, SQLiteDatabase.OpenParams openParams)
invoke-static {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->openDatabase(Ljava/io/File;Landroid/database/sqlite/SQLiteDatabase$OpenParams;)Landroid/database/sqlite/SQLiteDatabase;

Open the database according to the flags OPEN_READWRITE OPEN_READONLY CREATE_IF_NECESSARY and/or NO_LOCALIZED_COLLATORS.
SQLiteDatabase openDatabase(String path, SQLiteDatabase.CursorFactory factory, int flags, DatabaseErrorHandler errorHandler)
invoke-static {v0, v1, v2, v3}, Landroid/database/sqlite/SQLiteDatabase;->openDatabase(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ILandroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;

Equivalent to openDatabase(file.getPath(), factory, CREATE_IF_NECESSARY).
SQLiteDatabase openOrCreateDatabase(File file, SQLiteDatabase.CursorFactory factory)
invoke-static {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->openOrCreateDatabase(Ljava/io/File;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;

Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY, errorHandler).
SQLiteDatabase openOrCreateDatabase(String path, SQLiteDatabase.CursorFactory factory, DatabaseErrorHandler errorHandler)
invoke-static {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->openOrCreateDatabase(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;

Equivalent to openDatabase(path, factory, CREATE_IF_NECESSARY).
SQLiteDatabase openOrCreateDatabase(String path, SQLiteDatabase.CursorFactory factory)
invoke-static {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->openOrCreateDatabase(Ljava/lang/String;Landroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;

Query the given URL, returning a Cursor over the result set.
Cursor query(boolean distinct, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)
invoke-virtual/range {v0 .. v9}, Landroid/database/sqlite/SQLiteDatabase;->query(ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;

Query the given table, returning a Cursor over the result set.
Cursor query(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)
invoke-virtual/range {v0 .. v8}, Landroid/database/sqlite/SQLiteDatabase;->query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;

Query the given URL, returning a Cursor over the result set.
Cursor query(boolean distinct, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit, CancellationSignal cancellationSignal)
invoke-virtual/range {v0 .. v10}, Landroid/database/sqlite/SQLiteDatabase;->query(ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;

Query the given table, returning a Cursor over the result set.
Cursor query(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy)
invoke-virtual/range {v0 .. v7}, Landroid/database/sqlite/SQLiteDatabase;->query(Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;

Query the given URL, returning a Cursor over the result set.
Cursor queryWithFactory(SQLiteDatabase.CursorFactory cursorFactory, boolean distinct, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit, CancellationSignal cancellationSignal)
invoke-virtual/range {v0 .. v11}, Landroid/database/sqlite/SQLiteDatabase;->queryWithFactory(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;

Query the given URL, returning a Cursor over the result set.
Cursor queryWithFactory(SQLiteDatabase.CursorFactory cursorFactory, boolean distinct, String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)
invoke-virtual/range {v0 .. v10}, Landroid/database/sqlite/SQLiteDatabase;->queryWithFactory(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;ZLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;

Runs the provided SQL and returns a Cursor over the result set.
Cursor rawQuery(String sql, String[] selectionArgs, CancellationSignal cancellationSignal)
invoke-virtual {v0, v1, v2, v3}, Landroid/database/sqlite/SQLiteDatabase;->rawQuery(Ljava/lang/String;[Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;

Runs the provided SQL and returns a Cursor over the result set.
Cursor rawQuery(String sql, String[] selectionArgs)
invoke-virtual {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->rawQuery(Ljava/lang/String;[Ljava/lang/String;)Landroid/database/Cursor;

Runs the provided SQL and returns a cursor over the result set.
Cursor rawQueryWithFactory(SQLiteDatabase.CursorFactory cursorFactory, String sql, String[] selectionArgs, String editTable, CancellationSignal cancellationSignal)
invoke-virtual/range {v0 .. v5}, Landroid/database/sqlite/SQLiteDatabase;->rawQueryWithFactory(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Landroid/os/CancellationSignal;)Landroid/database/Cursor;

Runs the provided SQL and returns a cursor over the result set.
Cursor rawQueryWithFactory(SQLiteDatabase.CursorFactory cursorFactory, String sql, String[] selectionArgs, String editTable)
invoke-virtual {v0, v1, v2, v3, v4}, Landroid/database/sqlite/SQLiteDatabase;->rawQueryWithFactory(Landroid/database/sqlite/SQLiteDatabase$CursorFactory;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;

Attempts to release memory that SQLite holds but does not require to operate properly.
int releaseMemory()
invoke-static {}, Landroid/database/sqlite/SQLiteDatabase;->releaseMemory()I

Convenience method for replacing a row in the database.
long replace(String table, String nullColumnHack, ContentValues initialValues)
invoke-virtual {v0, v1, v2, v3}, Landroid/database/sqlite/SQLiteDatabase;->replace(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J

Convenience method for replacing a row in the database.
long replaceOrThrow(String table, String nullColumnHack, ContentValues initialValues)
invoke-virtual {v0, v1, v2, v3}, Landroid/database/sqlite/SQLiteDatabase;->replaceOrThrow(Ljava/lang/String;Ljava/lang/String;Landroid/content/ContentValues;)J

Sets whether foreign key constraints are enabled for the database.
void setForeignKeyConstraintsEnabled(boolean enable)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->setForeignKeyConstraintsEnabled(Z)V

Sets the locale for this database.
void setLocale(Locale locale)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->setLocale(Ljava/util/Locale;)V

This method was deprecated in API level 16. This method now does nothing. Do not use.
void setLockingEnabled(boolean lockingEnabled)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->setLockingEnabled(Z)V

Sets the maximum size of the prepared-statement cache for this database.
void setMaxSqlCacheSize(int cacheSize)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->setMaxSqlCacheSize(I)V

Sets the maximum size the database will grow to.
long setMaximumSize(long numBytes)
invoke-virtual {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->setMaximumSize(J)J

Sets the database page size.
void setPageSize(long numBytes)
invoke-virtual {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->setPageSize(J)V

Marks the current transaction as successful.
void setTransactionSuccessful()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->setTransactionSuccessful()V

Sets the database version.
void setVersion(int version)
invoke-virtual {v0, v1}, Landroid/database/sqlite/SQLiteDatabase;->setVersion(I)V

Returns a string representation of the object.
String toString()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->toString()Ljava/lang/String;

Convenience method for updating rows in the database.
int update(String table, ContentValues values, String whereClause, String[] whereArgs)
invoke-virtual {v0, v1, v2, v3, v4}, Landroid/database/sqlite/SQLiteDatabase;->update(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I

Convenience method for updating rows in the database.
int updateWithOnConflict(String table, ContentValues values, String whereClause, String[] whereArgs, int conflictAlgorithm)
invoke-virtual/range {v0 .. v5}, Landroid/database/sqlite/SQLiteDatabase;->updateWithOnConflict(Ljava/lang/String;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;I)I

Verifies that a SQL SELECT statement is valid by compiling it.
void validateSql(String sql, CancellationSignal cancellationSignal)
invoke-virtual {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->validateSql(Ljava/lang/String;Landroid/os/CancellationSignal;)V

This method was deprecated in API level 15. if the db is locked more than once (because of nested transactions) then the lock will not be yielded. Use yieldIfContendedSafely instead.
boolean yieldIfContended()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->yieldIfContended()Z

Temporarily end the transaction to let other threads run.
boolean yieldIfContendedSafely()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->yieldIfContendedSafely()Z

Temporarily end the transaction to let other threads run.
boolean yieldIfContendedSafely(long sleepAfterYieldDelay)
invoke-virtual {v0, v1, v2}, Landroid/database/sqlite/SQLiteDatabase;->yieldIfContendedSafely(J)Z

Called by the garbage collector on an object when garbage collection determines that there are no more references to the object.
protected void finalize()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->finalize()V

Called when the last reference to the object was released by a call to releaseReference() or close().
protected void onAllReferencesReleased()
invoke-virtual {v0}, Landroid/database/sqlite/SQLiteDatabase;->onAllReferencesReleased()V
