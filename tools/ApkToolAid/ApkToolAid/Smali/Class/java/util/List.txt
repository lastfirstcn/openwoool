有序的 collection（也称为序列）。此接口的用户可以对列表中每个元素的插入位置进行精确地控制。用户可以根据元素的整数索引（在列表中的位置）访问元素，并搜索列表中的元素。
interface java.util.List
.class interface Ljava/util/List;

向列表的尾部添加指定的元素（可选操作）。
boolean add(E e)
invoke-interface {v0, v1}, Ljava/util/List;->add(Ljava/lang/Object;)Z

在列表的指定位置插入指定元素（可选操作）。
void add(int index, E element)
invoke-interface {v0, v1, v2}, Ljava/util/List;->add(ILjava/lang/Object;)V

添加指定 collection 中的所有元素到此列表的结尾，顺序是指定 collection 的迭代器返回这些元素的顺序（可选操作）。
boolean addAll(Collection<? extends E> c)
invoke-interface {v0, v1}, Ljava/util/List;->addAll(Ljava/util/Collection;)Z

将指定 collection 中的所有元素都插入到列表中的指定位置（可选操作）。
boolean addAll(int index, Collection<? extends E> c)
invoke-interface {v0, v1, v2}, Ljava/util/List;->addAll(ILjava/util/Collection;)Z

从列表中移除所有元素（可选操作）。
void clear()
invoke-interface {v0}, Ljava/util/List;->clear()V

如果列表包含指定的元素，则返回 true。
boolean contains(Object o)
invoke-interface {v0, v1}, Ljava/util/List;->contains(Ljava/lang/Object;)Z

如果列表包含指定 collection 的所有元素，则返回 true。
boolean containsAll(Collection<?> c)
invoke-interface {v0, v1}, Ljava/util/List;->containsAll(Ljava/util/Collection;)Z

比较指定的对象与列表是否相等。
boolean equals(Object o)
invoke-interface {v0, v1}, Ljava/util/List;->equals(Ljava/lang/Object;)Z

返回列表中指定位置的元素。
E get(int index)
invoke-interface {v0, v1}, Ljava/util/List;->get(I)Ljava/lang/Object;

返回列表的哈希码值。
int hashCode()
invoke-interface {v0}, Ljava/util/List;->hashCode()I

返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 -1。
int indexOf(Object o)
invoke-interface {v0, v1}, Ljava/util/List;->indexOf(Ljava/lang/Object;)I

如果列表不包含元素，则返回 true。
boolean isEmpty()
invoke-interface {v0}, Ljava/util/List;->isEmpty()Z

返回按适当顺序在列表的元素上进行迭代的迭代器。
Iterator<E> iterator()
invoke-interface {v0}, Ljava/util/List;->iterator()Ljava/util/Iterator;

返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 -1。
int lastIndexOf(Object o)
invoke-interface {v0, v1}, Ljava/util/List;->lastIndexOf(Ljava/lang/Object;)I

返回此列表元素的列表迭代器（按适当顺序）。
ListIterator<E> listIterator()
invoke-interface {v0}, Ljava/util/List;->listIterator()Ljava/util/ListIterator;

返回列表中元素的列表迭代器（按适当顺序），从列表的指定位置开始。
ListIterator<E> listIterator(int index)
invoke-interface {v0, v1}, Ljava/util/List;->listIterator(I)Ljava/util/ListIterator;

移除列表中指定位置的元素（可选操作）。
E remove(int index)
invoke-interface {v0, v1}, Ljava/util/List;->remove(I)Ljava/lang/Object;

从此列表中移除第一次出现的指定元素（如果存在）（可选操作）。
boolean remove(Object o)
invoke-interface {v0, v1}, Ljava/util/List;->remove(Ljava/lang/Object;)Z

从列表中移除指定 collection 中包含的其所有元素（可选操作）。
boolean removeAll(Collection<?> c)
invoke-interface {v0, v1}, Ljava/util/List;->removeAll(Ljava/util/Collection;)Z

仅在列表中保留指定 collection 中所包含的元素（可选操作）。
boolean retainAll(Collection<?> c)
invoke-interface {v0, v1}, Ljava/util/List;->retainAll(Ljava/util/Collection;)Z

用指定元素替换列表中指定位置的元素（可选操作）。
E set(int index, E element)
invoke-interface {v0, v1, v2}, Ljava/util/List;->set(ILjava/lang/Object;)Ljava/lang/Object;

返回列表中的元素数。
int size()
invoke-interface {v0}, Ljava/util/List;->size()I

返回列表中指定的 fromIndex（包括 ）和 toIndex（不包括）之间的部分视图。
List<E> subList(int fromIndex, int toIndex)
invoke-interface {v0, v1, v2}, Ljava/util/List;->subList(II)Ljava/util/List;

返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）。
Object[] toArray()
invoke-interface {v0}, Ljava/util/List;->toArray()[Ljava/lang/Object;

返回按适当顺序（从第一个元素到最后一个元素）包含列表中所有元素的数组；返回数组的运行时类型是指定数组的运行时类型。
<T> T[] toArray(T[] a)
invoke-interface {v0, v1}, Ljava/util/List;->toArray([Ljava/lang/Object;)[Ljava/lang/Object;
